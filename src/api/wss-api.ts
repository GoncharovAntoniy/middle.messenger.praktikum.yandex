import store from '../store/store';

export class WebSocketService {
  private socket: WebSocket | null = null;
  private url: string;
  private reconnectInterval = 5000;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 10;
  private pingInterval: NodeJS.Timeout | null = null;
  private isLoadingMessages = false; // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

  constructor(url: string) {
    this.url = url;
    this.connect();
  }

  private connect() {
    this.socket = new WebSocket(this.url);

    this.socket.onopen = () => {
      console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.reconnectAttempts = 0;
      this.startPing();
      this.loadAllMessages();
      setTimeout(() => this.getMessages(), 500);
    };

    this.socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        if (data.type === 'pong' || data.type === 'ping') {
          return;
        }
        console.log('Received JSON:', data);
        store.set('chatLogMessages', [...(store.getState().chatLogMessages || []), data]);

        if (Array.isArray(data)) {
          // const chatLogMessages = store.getState().chatLogMessages || [];
          store.set('chatLogMessages', [...data.reverse()]);
          this.isLoadingMessages = false;
        } else {
          store.set('chatLogMessages', [...(store.getState().chatLogMessages || []), data]);
        }
      } catch {
        console.warn('Received non-JSON message:', event.data);
      }
    };

    this.socket.onerror = (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    };

    this.socket.onclose = (event) => {
      console.warn(`‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç, –∫–æ–¥: ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason}`);
      this.stopPing();

      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        setTimeout(() => {
          console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          this.reconnectAttempts++;
          this.connect();
        }, this.reconnectInterval);
      }
    };
  }

  public getMessages(offset = 0) {
    if (this.socket?.readyState === WebSocket.OPEN) {
      this.socket.send(JSON.stringify({ type: 'get old', content: String(offset) }));
      console.log(`üì© –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å offset=${offset}`);
    } else {
      console.warn('‚ö†Ô∏è WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  private async loadAllMessages() {
    if (this.isLoadingMessages) return;
    this.isLoadingMessages = true;

    let totalMessages = 0;
    let receivedMessages = 0;
    const chatId = store.getState().currentChatId;

    if (!chatId) return console.warn('‚ö†Ô∏è –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
      const response = await fetch(`https://ya-praktikum.tech/api/v2/chats/new/${chatId}`, {
        method: 'GET',
        mode: 'cors',
        credentials: 'include',
        headers: { Authorization: `Bearer ${store.getState().token}` },
      });
      const count = await response.json();
      totalMessages = count.unread_count || 0;
      console.log(`üìä –í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 20
    let offset = 0;
    while (receivedMessages < totalMessages) {
      this.getMessages(offset);
      receivedMessages += 20;
      offset += 20;
      await new Promise((resolve) => setTimeout(resolve, 500)); // –ñ–¥–µ–º 500 –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    }
  }

  public send(data: object) {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      this.socket.send(JSON.stringify(data));
    } else {
      console.warn('‚ö†Ô∏è WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  public close() {
    this.stopPing();
    this.socket?.close(1000, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  }

  private startPing() {
    this.pingInterval = setInterval(() => {
      if (this.socket?.readyState === WebSocket.OPEN) {
        this.socket.send(JSON.stringify({ type: 'ping' }));
        console.log('üì° –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
    }, 10000);
  }

  private stopPing() {
    if (this.pingInterval) {
      clearInterval(this.pingInterval);
      this.pingInterval = null;
    }
  }
}
